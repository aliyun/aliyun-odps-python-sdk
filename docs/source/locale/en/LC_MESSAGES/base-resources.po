# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, The Alibaba Group Holding Ltd.
# This file is distributed under the same license as the PyODPS package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyODPS 0.7.16\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-29 16:26+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/base-resources.rst:4
msgid "资源"
msgstr "Resources"

#: ../../source/base-resources.rst:6
msgid ""
"`资源 <https://docs.aliyun.com/#/pub/odps/basic/definition&resource>`_ "
"在ODPS上常用在UDF和MapReduce中。"
msgstr ""
"`Resources <https://www.alibabacloud.com/help/en/doc-detail/27822.htm>`_ "
"commonly apply to UDF and MapReduce on MaxCompute."

#: ../../source/base-resources.rst:8
msgid ""
"列出所有资源还是可以使用 ``list_resources``，判断资源是否存在使用 ``exist_resource``。 删除资源时，可以调用"
" ``delete_resource``，或者直接对于Resource对象调用 ``drop`` 方法。"
msgstr ""
"You can use ``list_resources`` to list all resources and use "
"``exist_resource`` to check whether a resource exists. You can call "
"``delete_resource`` to delete resources or directly call the drop method "
"for a resource object."

#: ../../source/base-resources.rst:11
msgid "在PyODPS中，主要支持两种资源类型，一种是文件，另一种是表。下面分别说明。"
msgstr ""
"PyODPS mainly supports two resource types, namely, file resources and "
"table resources. The following describes the two resource types."

#: ../../source/base-resources.rst:14
msgid "文件资源"
msgstr "File resources"

#: ../../source/base-resources.rst:16
msgid "文件资源包括基础的 ``file`` 类型、以及 ``py``、``jar``、``archive``。"
msgstr ""
"File resources include the basic ``file`` type, and ``py``, ``jar``, and "
"``archive``."

#: ../../source/base-resources.rst:19
msgid "创建文件资源"
msgstr "Create a file resource"

#: ../../source/base-resources.rst:21
msgid "创建文件资源可以通过给定资源名、文件类型、以及一个file-like的对象（或者是字符串对象）来创建，比如"
msgstr ""
"You can create a file resource by specifying the resource name, file "
"type, and a file-like object (or a string object), as shown in the "
"following example:"

#: ../../source/base-resources.rst:23
msgid ""
"resource = o.create_resource('test_file_resource', 'file', "
"file_obj=open('/to/path/file'))  # 使用file-like的对象\n"
"resource = o.create_resource('test_py_resource', 'py', file_obj='import "
"this')  # 使用字符串"
msgstr ""
"resource = o.create_resource('test_file_resource', 'file', "
"file_obj=open('/to/path/file'))  # use file-like objects as file content"
"\n"
"resource = o.create_resource('test_py_resource', 'py', file_obj='import "
"this')  # use strings as file content"

#: ../../source/base-resources.rst:29
msgid "可以通过 ``temp=True`` 创建一个临时资源。"
msgstr "You can use argument ``temp=True`` to create a temporarily resource."

#: ../../source/base-resources.rst:31
msgid ""
"resource = o.create_resource('test_file_resource', 'file', "
"file_obj=open('/to/path/file'), temp=True)"
msgstr ""

#: ../../source/base-resources.rst:37
msgid "读取和修改文件资源"
msgstr "Read and modify a file resource"

#: ../../source/base-resources.rst:39
msgid ""
"对文件资源调用 ``open`` 方法，或者在odps入口调用 ``open_resource`` 都能打开一个资源， 打开后的对象会是file-"
"like的对象。 类似于Python内置的 ``open`` 方法，文件资源也支持打开的模式。我们看例子："
msgstr ""
"You can call the ``open`` method for a file resource or call "
"``open_resource`` at the MaxCompute entry to open a file resource. The "
"opened object is a file-like object. Similar to the open method built in "
"Python, file resources also support the ``open`` mode. For example:"

#: ../../source/base-resources.rst:43
msgid ""
">>> with resource.open('r') as fp:  # 以读模式打开\n"
">>>     content = fp.read()  # 读取全部的内容\n"
">>>     fp.seek(0)  # 回到资源开头\n"
">>>     lines = fp.readlines()  # 读成多行\n"
">>>     fp.write('Hello World')  # 报错，读模式下无法写资源\n"
">>>\n"
">>> with o.open_resource('test_file_resource', mode='r+') as fp:  # "
"读写模式打开\n"
">>>     fp.read()\n"
">>>     fp.tell()  # 当前位置\n"
">>>     fp.seek(10)\n"
">>>     fp.truncate()  # 截断后面的内容\n"
">>>     fp.writelines(['Hello\\n', 'World\\n'])  # 写入多行\n"
">>>     fp.write('Hello World')\n"
">>>     fp.flush()  # 手动调用会将更新提交到ODPS"
msgstr ""
">>> with resource.open('r') as fp:  # open a resource in read mode\n"
">>>     content = fp.read()  # read all content\n"
">>>     fp.seek(0)  # return to the start of the resource\n"
">>>     lines = fp.readlines()  # read multiple lines\n"
">>>     fp.write('Hello World')  # an error will be raised as resources "
"cannot be written in read mode\n"
">>>\n"
">>> with o.open_resource('test_file_resource', mode='r+') as fp:  # "
"enable read/write mode\n"
">>>     fp.read()\n"
">>>     fp.tell()  # current position\n"
">>>     fp.seek(10)\n"
">>>     fp.truncate()  # truncate the following content\n"
">>>     fp.writelines(['Hello\\n', 'World\\n'])  # write multiple lines\n"
">>>     fp.write('Hello World')\n"
">>>     fp.flush()  # manual call submits the update to MaxCompute"

#: ../../source/base-resources.rst:60
msgid "所有支持的打开类型包括："
msgstr "The following open modes are supported:"

#: ../../source/base-resources.rst:62
msgid "``r``，读模式，只能打开不能写"
msgstr "``r``: Read mode. The file can be opened but cannot be written."

#: ../../source/base-resources.rst:63
msgid "``w``，写模式，只能写入而不能读文件，注意用写模式打开，文件内容会被先清空"
msgstr ""
"``w``: Write mode. The file can be written but cannot be read. Note that "
"file content is cleared first if the file is opened in write mode."

#: ../../source/base-resources.rst:64
msgid "``a``，追加模式，只能写入内容到文件末尾"
msgstr "``a``: Append mode. Content can be added to the end of the file."

#: ../../source/base-resources.rst:65
msgid "``r+``，读写模式，能任意读写内容"
msgstr "``r+``: Read/write mode. You can read and write any content."

#: ../../source/base-resources.rst:66
msgid "``w+``，类似于 ``r+``，但会先清空文件内容"
msgstr "``w+``: Similar to ``r+``, but file content is cleared first."

#: ../../source/base-resources.rst:67
msgid "``a+``，类似于 ``r+``，但写入时只能写入文件末尾"
msgstr ""
"``a+``: Similar to ``r+``, but content can be added to the end of the "
"file only during writing."

#: ../../source/base-resources.rst:69
msgid ""
"同时，PyODPS中，文件资源支持以二进制模式打开，打开如说一些压缩文件等等就需要以这种模式， 因此 ``rb`` "
"就是指以二进制读模式打开文件，``r+b`` 是指以二进制读写模式打开。"
msgstr ""
"In PyODPS, file resources can be opened in binary mode. For example, some"
" compressed files must be opened in binary mode. ``rb`` indicates opening"
" a file in binary read mode, and ``r+b`` indicates opening a file in "
"binary read/write mode."

#: ../../source/base-resources.rst:73
msgid "表资源"
msgstr "Table resources"

#: ../../source/base-resources.rst:76
msgid "创建表资源"
msgstr "Create a table resource"

#: ../../source/base-resources.rst:78
msgid ""
">>> o.create_resource('test_table_resource', 'table', "
"table_name='my_table', partition='pt=test')"
msgstr ""

#: ../../source/base-resources.rst:83
msgid "更新表资源"
msgstr "Update a table resource"

#: ../../source/base-resources.rst:85
msgid ""
">>> table_resource = o.get_resource('test_table_resource')\n"
">>> table_resource.update(partition='pt=test2', "
"project_name='my_project2')"
msgstr ""

#: ../../source/base-resources.rst:91
msgid "获取表及分区"
msgstr "Obtain associated table and partition"

#: ../../source/base-resources.rst:93
msgid ""
">>> table_resource = o.get_resource('test_table_resource')\n"
">>> table = table_resource.table\n"
">>> print(table.name)\n"
">>> partition = table_resource.partition\n"
">>> print(partition.spec)"
msgstr ""

#: ../../source/base-resources.rst:102
msgid "读写内容"
msgstr "Read and write table"

#: ../../source/base-resources.rst:104
msgid ""
">>> table_resource = o.get_resource('test_table_resource')\n"
">>> with table_resource.open_writer() as writer:\n"
">>>     writer.write([0, 'aaaa'])\n"
">>>     writer.write([1, 'bbbbb'])\n"
">>> with table_resource.open_reader() as reader:\n"
">>>     for rec in reader:\n"
">>>         print(rec)"
msgstr ""

