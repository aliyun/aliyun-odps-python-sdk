name: PyODPS Deploy

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-16.04, macOS-latest, windows-latest]
        python-version: [2.7, 2.7-unicode, 3.5, 3.6, 3.7, 3.8]
        include:
          - { os: ubuntu-16.04, python-version: 2.7, python-abis: "cp27-cp27m" }
          - { os: ubuntu-16.04, python-version: 2.7-unicode, python-abis: "cp27-cp27mu" }
          - { os: ubuntu-16.04, python-version: 3.5, python-abis: "cp35-cp35m" }
          - { os: ubuntu-16.04, python-version: 3.6, python-abis: "cp36-cp36m" }
          - { os: ubuntu-16.04, python-version: 3.7, python-abis: "cp37-cp37m" }
          - { os: ubuntu-16.04, python-version: 3.8, python-abis: "cp38-cp38" }
          - { os: windows-latest, python-version: 3.8, build-static: 1 }
        exclude:
          - { os: macOS-latest, python-version: 2.7-unicode }
          - { os: windows-latest, python-version: 2.7-unicode }

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Set up conda ${{ matrix.python-version }}
      env:
        PYTHON: ${{ matrix.python-version }}
      shell: bash
      run: |
        source ./.github/workflows/install-conda.sh
        python -m pip install --upgrade pip setuptools wheel coverage;

    - name: Install dependencies
      shell: bash
      run: |
        source ./.github/workflows/reload-env.sh
        export DEFAULT_VENV=$VIRTUAL_ENV

        pip install -r requirements.txt
        pip install cython

        conda list

    - name: Deploy packages
      if: startsWith(github.ref, 'refs/tags/') && matrix.no-deploy != '1'
      shell: bash
      env:
        DOCKER_IMAGE: "quay.io/pypa/manylinux1_x86_64"
        PYABI: ${{ matrix.python-abis }}
        BUILD_STATIC: ${{ matrix.build-static }}
        PYPI_PWD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        source ./.github/workflows/reload-env.sh
        source ./.github/workflows/upload-packages.sh

  build-aarch64:
    name: "Build on ${{ matrix.pyver }} aarch64"
    strategy:
      matrix:
        pyver: [cp36-cp36m, cp37-cp37m, cp38-cp38, cp39-cp39]
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      py: /opt/python/${{ matrix.pyver }}/bin/python
      img: quay.io/pypa/manylinux2014_aarch64
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v1
    - name: Make wheel
      run: |
        docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
          ${{ env.img }} \
            bash -exc 'yum install -y wget && \
            wget -q "https://github.com/conda-forge/miniforge/releases/download/4.8.2-1/Miniforge3-4.8.2-1-Linux-aarch64.sh" -O archiconda.sh &&\
            chmod +x archiconda.sh && \
            ./archiconda.sh -b -p /opt/conda && \
            export PATH="/opt/conda/bin:$PATH" && \
            ${{ env.py }} -m pip install --upgrade pip setuptools wheel coverage cython && \
            ${{ env.py }} -m pip install -r requirements.txt && \
            ${{ env.py }} setup.py bdist_wheel && \
            auditwheel repair dist/*.whl'
    - name: Publish wheels to PyPI
      if: startsWith(github.ref, 'refs/tags/') && matrix.no-deploy != '1'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_PASSWORD }}
        packages_dir: wheelhouse
